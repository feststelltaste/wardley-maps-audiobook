Chapter 17 - Section 2.: The issue of legacy

   In xref:#chapter-9-charting-the-future[chapter 9], we examined the climatic patterns of co-evolution i.e. practices can co-evolve with the evolution of an activity. There is usually some form of inertia to a changing activity and this can be compounded by co-evolution of practice. In figure 218, I’ve taken the original diagram from chapter and added some inertia barriers for the shift from product to utility for both compute and also platform.
See    Figure 218: Change of Compute and Platform
 for more details.
   As previously discussed, there are many forms that inertia can take. However, the question I want us to consider is what represents legacy in this map? The two obvious areas for legacy are those trapped behind inertia barriers e.g. compute as a product and platform as a product (i.e. platform stacks). The next obvious includes those related practices i.e. best architectural practice associated with compute as a product. What is not so obvious to begin with is the issue that as components evolve enabling higher order systems to appear then the lower order systems become less visible and for most of us legacy. The departments that ran switchboards in most companies were once a highly important and often visible aspect of communication. For many companies, that activity has been consumed into either reception or call centres in much the same way that email has consumed the postal room. We still send letters to each other (more than ever before) but they are digital. In the map above, the role
   of the components underneath the platform layer are going to become less visible. Dealing with and managing infrastructure will become as legacy to most companies as the switchboard is today.

   Hence another area of legacy would be the practices and activities below the platform layer which includes concepts such as DevOps. In 2017, such a statement tends to receive a strong negative reaction. Most react with the same forms of inertia as those who reacted against cloud in 2006. Many will claim DevOps is more than infrastructure as it’s about development and culture. Depending upon how far in the future you’re reading this from, you’ll probably be quite surprised by this and even more likely you will have never heard of DevOps.

   As with all such things, DevOps was a child and reaction against the prevailing methods of management. It co-opted concepts from earlier schools of thought (e.g. ITIL) including iterative approaches, use of components, configuration management, services approach, a focus on users and measurement whilst simultaneously distancing itself from them. It added its own dogma and created a separate tribe. The same will happen in platform, a new school of thought will emerge that will copy and build upon DevOps but deny it has any relationship to it. DevOps will become “what my mum and dad does” as the rebellious child declares its independence and denies any inheritance from the former. Many of the genes of DevOps will be found in this new generation (though they will rarely admit it, painting DevOps as some form of strawman version of itself), some of the genes will become recessive and new genes will dominate.

   I’ve marked on these main areas of legacy onto our map in figure 219. To do this, I’ve used the concepts of inertia and how industrialised components enable not only higher order systems but become less visible themselves. I’ve also added on a typical PST structure. As we can see, many of the legacy areas exist within the settlers and the town planning teams.
See    Figure 219: Adding legacy (a consumer perspective)
 for more details.
   There is also a perspective to be considered here. I’m looking from the point of view of someone who consumes compute. If I’m a major provider, whether platform in the future or utility compute today then much of this is definitely not legacy any more than power generation systems are to electricity providers. From the perspective of a major provider then legacy would look more like figure 220 i.e. it will consist of activities (and related practices) that are stuck behind inertia barriers but not the impact of lower order systems becoming less visible. What becomes increasingly invisible to others (i.e. consumers) is still very visible to providers.
See    Figure 220: Legacy from a provider perspective
 for more details.
   Despite the unfortunate tendency of people to associate the town planning groups with legacy, it should be clear from the above that this is not the case. Cloud computing was has been all about industrialisation by town planners to utility services. The recent legacy has been past product models, a realm of settlers. If we take the consumer perspective from figure 219, then the future is a mix of settlers building applications, pioneers discovering emerging practices that combine finance with development (whilst denying any inheritance from DevOps) and town planners busily create the empires of scale around platform utility services. I’ve shown this future in figure 221 and it’s where companies should be investing in 2017.
See    Figure 221: The future, from a consumer perspective
 for more details.
   It’s important to note that legacy can be anywhere. It can be caused by a custom built activity which has failed to evolve or a product based business in a utility world. Legacy is simply a consequence of a failure to evolve and it is not associated with one group such as pioneers, settlers or town planners but instead all. When it comes to managing legacy then it’s really important to understand those points of change and the impact of co-evolution. This will become second nature to you but it’s worth practicing. There’s another perspective beyond the three horizons, beyond inertia and legacy that we also need to discuss. It’s the perspective of Porter’s forces.

