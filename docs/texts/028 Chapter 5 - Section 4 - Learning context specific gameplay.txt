Chapter 5 - Section 4.: Learning context specific gameplay

   Context specific play: Accelerators, decelerators and constraints

   I understood that everything evolved due to competition and had plenty of evidence to show past examples from electricity to nuts and bolts. The question was could I somehow influence this? By coincidence, from the very early days of 2001 we had not only been users of open source but also contributors to it. We supported the Perl language and many other open source projects.

   I had purposefully used these as fertile hunting grounds to recruit my amazing team during 2002–2005. But I had also observed how open source efforts through collaboration with others had produced stunning technology that out surpassed proprietary efforts in many fields. In many cases, open source technology was becoming the de facto standard and even the commodity in a field. It seemed that the very act of open sourcing, if a strong enough community could be created would drive a once magical wonder to becoming a commodity. Open source seemed to accelerate competition for whatever activity it was applied to.

   I had also witnessed how counter forces existed such as fear, uncertainty and doubt. This was often applied by vendors to open source projects to dissuade others by reinforcing any inertia they had to change. Open source projects were invariably accused of being not secure, open to hackers (as though that’s some form of insult), of dubious pedigree and of being a risk. However, to us, and the millions of users who consumed our services then they were an essential piece of the jigsaw puzzle. By chance, the various battles around open source had increased my awareness of intellectual property. I became acutely conscience of how patents were regularly used for ring-fencing to prevent a competitor developing a product. This was the antithesis of competition and it was stifling. I started to form an opinion that certain actions would accelerate competition and drive a component towards a commodity whilst others could be used to slow its evolution. The landscape could be manipulated.

   At the same, I had noticed that as certain activities became more industrialised and therefore more widespread then it often became difficult to find people with the right skills or there were shortages of underlying components. The evolution of a component could therefore be constrained by a component it depended upon such as knowledge. I’ve summarised these points in figure 54 by applying them to our first map.
   Figure54 : Accelerators, decelerators and constraints

   Point 1 — the evolution of a component can be accelerated by an open approach, whether open source or open data.

   Point 2 — the evolution of a component can be slowed down through the use of fear, uncertainty and doubt when crossing an inertia barrier or through the use of patents to ring-fence a technology.

   Point 3 — the evolution of a component can be affected by constraints in underlying components e.g. converting compute to a utility would potentially cause a rapid increase in demand (due to new uncharted components that are built upon it or the long tail of unmet business needs) but this requires building data centres. Whilst the provision of virtual machines could be rapid, the building of data centres are not.

   I started to explore the map further, looking for other ways we could exploit.

   Context specific play: Innovate, Leverage and Commoditise

   I have frequently been told that it is better to be a fast follower than a first mover. But is that true? Using the map told me a slightly more complex story. Certainly when exploring an uncharted space, there was lots of uncertainty and huge costs of R&D. It certainly seemed better to let others incur that risk and then somehow acquire that capability. But researchers and companies were constantly creating new things and so there was also a cost of discovering that new successful thing in all the noise. We wouldn’t be the only company trying to play that game and any acquisition cost would reflect this. If we wanted to play that game, then somehow we need to be able to identify future success more effectively than others.

   By comparison, when taking a product to a utility then the component was already quite well known. It was defined, there was an existing market but yes there would be inertia. I realised there was a connection between the two and we were sitting on the answer. Our pioneer — settler — town planner structure had enabled us to cope with evolution and connect the two extremes. The settlers role was simply to identify future successful patterns and learn about them by refining a product or library component. In 2005, we actually referred to our settlers as the framework team and their success came from understanding the patterns within what the pioneers — our development team — had built. The pioneers were our gamblers.

   However, what If our pioneers weren’t us but instead other companies? Could our settlers discover successful patterns in all that noise? The problem of course was where would we look? Like any product vendor we could perform some marketing survey to find out how people were using our components but this seemed slow and cumbersome. Fortunately, our online photo service gave us the answer.

   Between 2003 to 2005, we had exposed parts of the photo service through URL requests and APIs to others. It wasn’t much of a leap to realise that if we monitored consumption of our APIs then we could use this to identify in real-time what other companies were being successful without resorting to slow and expensive marketing surveys. This lead to the innovate — leverage — commoditse (ILC) model. Originally, I called this innovate — transition — commoditise and I owe Mark Thompson a thank you for persuading me to change transition to something more meaningful. The ILC model is described in figure 55 and we will go through its operation.
See    Figure 55: ILC (innovate, leverage and commoditise)
 for more details.
   Take an existing product that is relatively well defined and commonplace and turn it into an industrialised utility (Point A1 to A2). This utility should be exposed as an easy to use API. Then encourage and enable other companies to innovate by building on top of your utility (Point B1). You can do this by increasing their agility and reducing their cost of failure, both of which a utility will provide. These companies building on top of your utility are your “outside” pioneers or what we commonly call an “ecosystem”.

   The more companies you have building on top of your utility (i.e. the larger your ecosystem) then the more things your “outside” pioneers will be building and the wider the scope of new innovations. Your “outside” ecosystem is in fact your future sensing engine. By monitoring meta data such as the consumption of your utility services then you can determine what is becoming successful. It’s important to note that you don’t need to examine the data of those “outside” companies but purely the meta data hence you can balance security concerns with future sensing. You should use this meta data to identify new patterns that are suitable for provision as industrialised components (B1 to B2). Once you’ve identified a future pattern then you should industrialise it to a discrete component service (B3) provided as utility and exposed through an API. You’re now providing multiple components (A2, B3) in an ever growing platform of component services for others to build upon (C1). You then repeat this
    virtuous circle.

   Obviously, companies in any space that you’ve just industrialised (B2 to B3) might grumble — “they’ve eaten our business model” — so, you’ll have to carefully balance acquisition with implementation. On the upside, the more component services you provide in your platform then the more attractive it becomes to others. You’ll need to manage this ecosystem as a gardener encouraging new crops (“outside companies”) to grow and being careful not to harvest too much. Do note, this creates an ever expanding platform in the sense of a loose gathering of discrete component services (e.g. storage, compute, database) which is distinct from a code execution platform (i.e. a framework in which you write code).

   There is some subtle beauty in the ILC model. If we take our ecosystem to be the companies building on top of our discrete component services, then the larger the ecosystem is:      * the greater the economies of scale in our underlying components
     * the more meta data exists to identify future patterns
     * the broader the scope of innovative components built on top and hence the wider the future environment that we can scan

   This translates to an increasing appearance of being highly efficient as we industrialise components to commodity forms with economies of scale but also highly customer focused due to leveraging meta data to find patterns others want. Finally, others will come to view us as highly innovative through the innovation of others. All of these desirable qualities will increase with the size of the ecosystem as long as we mine the meta data and act as an effective gardener.

   Being constantly the first mover to industrialise a component provides a huge benefit in enabling us to effectively be a fast follower to future success and wealth generation. The larger the ecosystem we build, the more powerful the benefits become. There is a network effect here and this model stood in stark contrast to what I had been told — that you should be a fast follower and that you could be one of highly innovate, efficient or customer focused. Looking at the map, I knew that with a bit of sleight of hand then I could build the impression that I was achieving all three by being a first mover to industrialise and a fast follower to the uncharted. I normally represent this particular form of ecosystem model (there are many different forms) with a set of concentric circles. I’ve transposed figure 55 above into such a circular form and added some notes, see figure 56. In this world, you push your “pioneers” outside of the organisation by allowing other companies to be your pioneers.
See    Figure 56: Circular view of ILC
 for more details.
