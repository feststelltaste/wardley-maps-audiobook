Chapter 16 - Section 4.: Opportunities multiply as they are seized.

   You’ve decided to build the LFP system using it as a springboard to develop a future position around the co-evolved practice that will emerge in the platform space. You’ve overcome your internal inertia through discussion, formed the teams and explained this to the board. You’ll sacrifice some short term expected return for a future position with an eye to repackaging the solution and selling it to others along whilst developing a new practice in the co-evolved space. You roll the dice and it comes up … outcome 2. Oh, damn.

   The LFP system isn’t going quite as well as we might hope. Fortunately for us, we didn’t build in the in-house variant otherwise we’d be losing money right now and our discussions with the board might be getting more tasty. The problem with our options analysis is we didn’t price in any variability and risk appetite. The in-house variant was riskier because it not only had the highest expected return but the lowest — there was a wide spread. In this case outcome 2 is a net loss. We can chalk that up as a future learning lesson (or in my case — past painful lesson). However, let us compare what happens with outcome 2 in both variants. Let us say that despite things not going so well both marketing and engineering have dived in and come up with proposals. There are two options on the table. So, which, if any, do we choose?
     * Engineering says they could improve code efficiency by 75% for $350K
     * Marketing say they could add 400k extra microsite visitors for $150K each month

   Let us go through each variant. In figure 211, I’ve added the financial impact for the proposals on the in-house variant.
See    Figure 211: Financial impact on in-house variant
 for more details.
   Since outcome 2 is happening, we will use this as the base case and add the impacts from the proposals. The first thing to notice is that the development proposal doesn’t make the case better but instead it makes the finances worse. Why? Because the cost is already sunk and spending money on refactoring doesn’t improve the financial case as there is nothing to be recovered through code efficiency. The only possible saving grace would be through releasing some hardware to get a quicker sale of it and less depreciated value. That’s in the realm of wishful thinking in most cases. Sadly, it’s often difficult to justify spending more money on a refactoring effort in such circumstances. The marketing proposal however gives us some uplift. At least it recovers some of the pain. Our final expected return is still below our normal of 40% but we’re saving a bit of face. The combination of both development and marketing gives us the benefits of marketing combined with the loss of development. It’s far
   better to just do the marketing proposal.

   Ok, so let us repeat this exercise but now look at the public platform variant which is the one we actually chose. I’ve created the model in figure 212.
See    Figure 212: Financial impact on public platform variant
 for more details.
   The first thing to note is we’re in much better shape with outcome 2 because we didn’t have that initial sunk cost of investment. But then something odd happens. If you look at the development option, by spending money on refactoring then we make a much better return. In fact, it’s a huge return! Hang on, how’s that possible? Well simply put, we’re paying for consumption of the utility platform (such as AWS Lambda) based upon our actual use. If you make the code more efficient then you pay less. There is suddenly a financial reason for refactoring code. There are many other benefits with such platforms from consuming services to code re-use but the changes to the way we write, refactor and monitor code are significant. This is what co-evolution is all about and in this case, it’s the collision between development and finance.

   The second thing to note is that marketing is a net loss. How is that possible when in the in-house variant it’s positive? On a consumption basis, the cost to acquire and cost of operation for each new user significantly exceeds the additional revenue they create and so it’s a loss at this acquisition price. The marketing proposal doesn’t make sense in the public platform variant because there’s direct linkage of actual cost against revenue. But in the in-house variant, then most of the costs of operation have already been spent in the initial upfront investment. It’s a sunk cost. In which case given we’ve already spent most of the money and we’re actually comparing the acquisition cost versus the additional revenue. The marketing proposal makes sense in the in-house variant precisely because you’ve already blown most of the cost.

   But hang on, the third option of both marketing and development looks better than all of them. How can that be? In this case, the reduced cost of each user on the service (because of refactoring i.e. the development effort) means that the total cost per new user (i.e. marketing acquisition plus operational) is now less than the additional revenue they create. The sum of the whole is greater than the sum of the individual parts. Hence the last option gives us the best choice and that’s where we invest. The shift towards utility platforms and billing at the functional level fundamentally changes your entire investment approach in projects. From no more nonsense about additional IT users having a marginal cost of zero (i.e. we’ve sunk a lot of cost and can’t actually allocate them) to refactoring suddenly becoming a financial consideration. The true costs (not just of acquiring but operating) of marketing are hence exposed.

   We’re already starting to experience some of those co-evolved practices and this looks like a big change. This is why I created that first platform back in 2005 but as you’ll come to learn, these opportunities jump at you when you embrace the future. But, why didn’t I continue and rebuild the platform after the parent company decided it wanted to go elsewhere? Well, I spent a bit of time working on printed electronics and then met an astronaut but that’s the next chapter.

